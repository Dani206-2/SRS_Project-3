# Add a horizontal line at y = 0
abline(h = 0, col = "red")
# QQ plot of Pearson residuals
qqnorm(step_model$residuals, main = "QQ Plot of Pearson Residuals")
qqline(step_model$residuals)
#**** 6. Checking model assumptions ****
#*
# Pearson residuals plot
plot(step_model$fitted.values, pearson_residual,
xlab = "Fitted values (log)", ylab = "Pearson residuals",
main = "Pearson Residuals Plot", col = "blue", log = "x", xlim = c(0.5, 2000))
# Add a horizontal line at y = 0
abline(h = 0, col = "red")
# QQ plot of Pearson residuals
qqnorm(step_model$residuals, main = "QQ Plot of Pearson Residuals")
qqline(step_model$residuals)
#**** 6. Checking model assumptions ****
par(mfrow = c(1, 2))
# Pearson residuals plot
plot(step_model$fitted.values, pearson_residual,
xlab = "Fitted values (log)", ylab = "Pearson residuals",
main = "Pearson Residuals Plot", col = "blue", log = "x", xlim = c(0.5, 2000))
# Add a horizontal line at y = 0
abline(h = 0, col = "red")
# QQ plot of Pearson residuals
qqnorm(step_model$residuals, main = "QQ Plot of Pearson Residuals")
qqline(step_model$residuals)
#**** 6. Checking model assumptions ****
par(mfrow = c(1, 2))
# Pearson residuals plot
plot(step_model$fitted.values, pearson_residual,
xlab = "Fitted values (log)", ylab = "Pearson residuals",
main = "Pearson Residuals Plot", col = "blue", log = "x", xlim = c(0.5, 2000))
# Add a horizontal line at y = 0
abline(h = 0, col = "red")
# QQ plot of Pearson residuals
qqnorm(step_model$residuals, main = "QQ Plot of Pearson Residuals")
qqline(step_model$residuals)
#**** 6. Checking model assumptions ****
par(mfrow = c(2, 1))
# Pearson residuals plot
plot(step_model$fitted.values, pearson_residual,
xlab = "Fitted values (log)", ylab = "Pearson residuals",
main = "Pearson Residuals Plot", col = "blue", log = "x", xlim = c(0.5, 2000))
# Add a horizontal line at y = 0
abline(h = 0, col = "red")
# QQ plot of Pearson residuals
qqnorm(step_model$residuals, main = "QQ Plot of Pearson Residuals")
qqline(step_model$residuals)
#**** 6. Checking model assumptions ****
par(mfrow = c(1, 2))
# Pearson residuals plot
plot(step_model$fitted.values, pearson_residual,
xlab = "Fitted values (log)", ylab = "Pearson residuals",
main = "Pearson Residuals Plot", col = "blue", log = "x", xlim = c(0.5, 2000))
# Add a horizontal line at y = 0
abline(h = 0, col = "red")
# QQ plot of Pearson residuals
qqnorm(step_model$residuals, main = "QQ Plot of Pearson Residuals")
qqline(step_model$residuals)
#**** 6. Checking model assumptions ****
par(mfrow = c(1, 2))
options(scipen = 200)
# Pearson residuals plot
plot(step_model$fitted.values, pearson_residual,
xlab = "Fitted values (log)", ylab = "Pearson residuals",
main = "Pearson Residuals Plot", col = "blue", log = "x", xlim = c(0.5, 2000))
# Add a horizontal line at y = 0
abline(h = 0, col = "red")
# QQ plot of Pearson residuals
qqnorm(step_model$residuals, main = "QQ Plot of Pearson Residuals")
qqline(step_model$residuals)
#**** 6. Checking model assumptions ****
par(mfrow = c(1, 2))
options(scipen = 200)
# Pearson residuals plot
plot(step_model$fitted.values, pearson_residual,
xlab = "Fitted values (log)", ylab = "Pearson residuals",
main = "Pearson Residuals Plot", col = "blue", log = "x")
# Add a horizontal line at y = 0
abline(h = 0, col = "red")
# QQ plot of Pearson residuals
qqnorm(step_model$residuals, main = "QQ Plot of Pearson Residuals")
qqline(step_model$residuals)
#**** 6. Checking model assumptions ****
par(mfrow = c(1, 2))
options(scipen = 200)
# Pearson residuals plot
plot(step_model$fitted.values, pearson_residual,
xlab = "Fitted values (log)", ylab = "Pearson residuals",
main = "Pearson Residuals Plot", col = "blue")
# Add a horizontal line at y = 0
abline(h = 0, col = "red")
# QQ plot of Pearson residuals
qqnorm(step_model$residuals, main = "QQ Plot of Pearson Residuals")
qqline(step_model$residuals)
#**** 6. Checking model assumptions ****
par(mfrow = c(1, 2))
options(scipen = 200)
# Pearson residuals plot
plot(step_model$fitted.values, pearson_residual,
xlab = "Fitted values (log)", ylab = "Pearson residuals",
main = "Pearson Residuals Plot", col = "blue", log = "x",xlim=log(x))
step_model
#**** 6. Checking model assumptions ****
par(mfrow = c(1, 2))
options(scipen = 200)
# Pearson residuals plot
plot(step_model$fitted.values, pearson_residual,
xlab = "Fitted values (log)", ylab = "Pearson residuals",
main = "Pearson Residuals Plot", col = "blue", log = "x",xlim= log(step_model$fitted.values))
#**** 6. Checking model assumptions ****
par(mfrow = c(1, 2))
options(scipen = 200)
# Pearson residuals plot
plot(step_model$fitted.values, pearson_residual,
xlab = "Fitted values (log)", ylab = "Pearson residuals",
main = "Pearson Residuals Plot", col = "blue", log = "x",xlim=c(0,log(step_model$fitted.values)) )
log(step_model$fitted.values)
#**** 6. Checking model assumptions ****
par(mfrow = c(1, 2))
options(scipen = 200)
# Pearson residuals plot
plot(step_model$fitted.values, pearson_residual,
xlab = "Fitted values (log)", ylab = "Pearson residuals",
main = "Pearson Residuals Plot", col = "blue", log = "x",xlim=, xlim = log(c(0.5, 2000)) )
#**** 6. Checking model assumptions ****
par(mfrow = c(1, 2))
options(scipen = 200)
# Pearson residuals plot
plot(step_model$fitted.values, pearson_residual,
xlab = "Fitted values (log)", ylab = "Pearson residuals",
main = "Pearson Residuals Plot", col = "blue", log = "x", xlim = log(c(0.5, 2000)) )
#**** 6. Checking model assumptions ****
par(mfrow = c(1, 2))
options(scipen = 200)
# Pearson residuals plot
plot(step_model$fitted.values, pearson_residual,
xlab = "Fitted values (log)", ylab = "Pearson residuals",
main = "Pearson Residuals Plot", col = "blue", log = "x" )
# Add a horizontal line at y = 0
abline(h = 0, col = "red")
# QQ plot of Pearson residuals
qqnorm(step_model$residuals, main = "QQ Plot of Pearson Residuals")
qqline(step_model$residuals)
#**** 6. Checking model assumptions ****
par(mfrow = c(1, 2))
options(scipen = 200)
# Pearson residuals plot
plot(log(step_model$fitted.values), pearson_residual,
xlab = "Fitted values (log)", ylab = "Pearson residuals",
main = "Pearson Residuals Plot", col = "blue")
# Add a horizontal line at y = 0
abline(h = 0, col = "red")
# QQ plot of Pearson residuals
qqnorm(step_model$residuals, main = "QQ Plot of Pearson Residuals")
qqline(step_model$residuals)
#**** 6. Checking model assumptions ****
library(ggplot2)
# Calculate Pearson residuals
step_model$residuals <- residuals(step_model, type = "pearson")
# Create a data frame with log-transformed fitted values and residuals
df <- data.frame(fitted_values = log(step_model$fitted.values),
residuals = log(step_model$residuals))
# Plot combined Pearson residuals plot and QQ plot using ggplot2
ggplot(df, aes(x = fitted_values, y = residuals)) +
geom_point(color = "blue") +
labs(x = "Log of Fitted values", y = "Log of Pearson residuals",
title = "Pearson Residuals Plot (Log Scale)") +
geom_hline(yintercept = 0, color = "red") +
geom_qq(aes(sample = residuals)) +
geom_abline() +
labs(title = "QQ Plot of Pearson Residuals") +
theme_bw()
View(df)
#**** 6. Checking model assumptions ****
library(ggplot2)
# Calculate Pearson residuals
step_model$residuals <- residuals(step_model, type = "pearson")
# Create a data frame with log-transformed fitted values and residuals
df <- data.frame(fitted_values = log(step_model$fitted.values),
residuals = log(step_model$residuals))
# Plot combined Pearson residuals plot and QQ plot using ggplot2
ggplot(df, aes(x = fitted_values, y = residuals)) +
geom_point(color = "blue") +
labs(x = "Log of Fitted values", y = "Log of Pearson residuals",
title = "Pearson Residuals Plot (Log Scale)") +
geom_hline(yintercept = 0, color = "red") +
geom_qq(aes(sample = residuals)) +
geom_abline() +
labs(title = "QQ Plot of Pearson Residuals") +
theme_bw()
#**** 6. Checking model assumptions ****
library(ggplot2)
# Calculate Pearson residuals
step_model$residuals <- residuals(step_model, type = "pearson")
# Create a data frame with log-transformed fitted values and residuals
df <- data.frame(fitted_values = log(step_model$fitted.values),
residuals = step_model$residuals)
# Plot combined Pearson residuals plot and QQ plot using ggplot2
ggplot(df, aes(x = fitted_values, y = residuals)) +
geom_point(color = "blue") +
labs(x = "Log of Fitted values", y = "Log of Pearson residuals",
title = "Pearson Residuals Plot (Log Scale)") +
geom_hline(yintercept = 0, color = "red") +
geom_qq(aes(sample = residuals)) +
geom_abline() +
labs(title = "QQ Plot of Pearson Residuals") +
theme_bw()
ggplot(df, aes(x = fitted_values, y = residuals)) +
geom_point(color = "blue")
ggplot(df, aes(x = fitted_values, y = residuals)) +
geom_point(color = "blue") +
labs(x = "Log of Fitted values", y = "Log of Pearson residuals",
title = "Pearson Residuals Plot (Log Scale)") +
geom_hline(yintercept = 0, color = "red")
ggplot(df, aes(x = fitted_values, y = residuals)) +
geom_point(color = "blue") +
labs(x = "Log of Fitted values", y = "Log of Pearson residuals",
title = "Pearson Residuals Plot (Log Scale)") +
geom_hline(yintercept = 0, color = "red") +
geom_qq(aes(sample = residuals)) +
geom_abline() +
labs(title = "QQ Plot of Pearson Residuals") +
theme_bw()
#**** 6. Checking model assumptions ****
library(ggplot2)
# Create data frame for ggplot
df <- data.frame(fitted = exp(fitted(step_model)),
pearson_residual = pearson_residual)
# Pearson residuals plot
p1 <- ggplot(df, aes(x = fitted, y = pearson_residual)) +
geom_point() +
labs(x = "Fitted values (log scale)", y = "Pearson residuals") +
scale_x_log10() +
theme_bw()
# QQ plot of Pearson residuals
p2 <- ggplot(df, aes(sample = pearson_residual)) +
geom_qq() +
stat_qq_line() +
labs(x = "Theoretical quantiles", y = "Pearson residuals") +
theme_bw()
# Combine the plots
gridExtra::grid.arrange(p1, p2, ncol = 2)
#**** 6. Checking model assumptions ****
library(ggplot2)
# Create data frame for ggplot
df <- data.frame(fitted = step_model$fitted.values,
pearson_residual = pearson_residual)
# Pearson residuals plot
p1 <- ggplot(df, aes(x = fitted, y = pearson_residual)) +
geom_point() +
labs(x = "Fitted values (log scale)", y = "Pearson residuals") +
scale_x_log10() +
theme_bw()
# QQ plot of Pearson residuals
p2 <- ggplot(df, aes(sample = pearson_residual)) +
geom_qq() +
stat_qq_line() +
labs(x = "Theoretical quantiles", y = "Pearson residuals") +
theme_bw()
# Combine the plots
gridExtra::grid.arrange(p1, p2, ncol = 2)
#**** 6. Checking model assumptions ****
library(ggplot2)
# Create data frame for ggplot
df <- data.frame(fitted = step_model$fitted.values,
pearson_residual = pearson_residual)
# Pearson residuals plot
p1 <- ggplot(df, aes(x = fitted, y = pearson_residual)) +
geom_point() +
labs(x = "Fitted values (log scale)", y = "Pearson residuals") +
scale_x_log() +
theme_bw()
#**** 6. Checking model assumptions ****
library(ggplot2)
# Create data frame for ggplot
df <- data.frame(fitted = step_model$fitted.values,
pearson_residual = pearson_residual)
# Pearson residuals plot
p1 <- ggplot(df, aes(x = fitted, y = pearson_residual)) +
geom_point() +
labs(x = "Fitted values (log scale)", y = "Pearson residuals") +
theme_bw()
# QQ plot of Pearson residuals
p2 <- ggplot(df, aes(sample = pearson_residual)) +
geom_qq() +
stat_qq_line() +
labs(x = "Theoretical quantiles", y = "Pearson residuals") +
theme_bw()
# Combine the plots
gridExtra::grid.arrange(p1, p2, ncol = 2)
#**** 6. Checking model assumptions ****
library(ggplot2)
# Create data frame for ggplot
df <- data.frame(fitted = step_model$fitted.values,
pearson_residual = pearson_residual)
# Pearson residuals plot
p1 <- ggplot(df, aes(x = fitted, y = pearson_residual)) +
geom_point() +
labs(x = "Fitted values (log scale)", y = "Pearson residuals") +
scale_x_log10() +
theme_bw()
# QQ plot of Pearson residuals
p2 <- ggplot(df, aes(sample = pearson_residual)) +
geom_qq() +
stat_qq_line() +
labs(x = "Theoretical quantiles", y = "Pearson residuals") +
theme_bw()
# Combine the plots
gridExtra::grid.arrange(p1, p2, ncol = 2)
#**** 6. Checking model assumptions ****
library(ggplot2)
# Create data frame for ggplot
df <- data.frame(fitted = log(step_model$fitted.values),
pearson_residual = pearson_residual)
# Pearson residuals plot
p1 <- ggplot(df, aes(x = fitted, y = pearson_residual)) +
geom_point() +
labs(x = "Fitted values (log scale)", y = "Pearson residuals") +
theme_bw()
# QQ plot of Pearson residuals
p2 <- ggplot(df, aes(sample = pearson_residual)) +
geom_qq() +
stat_qq_line() +
labs(x = "Theoretical quantiles", y = "Pearson residuals") +
theme_bw()
# Combine the plots
gridExtra::grid.arrange(p1, p2, ncol = 2)
#**** 6. Checking model assumptions ****
library(ggplot2)
# Create data frame for ggplot
df <- data.frame(fitted = log(step_model$fitted.values),
pearson_residual = pearson_residual)
# Pearson residuals plot
p1 <- ggplot(df, aes(x = fitted, y = pearson_residual)) +
geom_point() +
labs(x = "Fitted values (log scale)", y = "Pearson residuals") +
theme_bw()
# QQ plot of Pearson residuals
p2 <- ggplot(df, aes(sample = pearson_residual)) +
geom_qq() +
stat_qq_line(color="red") +
labs(x = "Theoretical quantiles", y = "Pearson residuals") +
theme_bw()
# Combine the plots
gridExtra::grid.arrange(p1, p2, ncol = 2)
#**** 6. Checking model assumptions ****
library(ggplot2)
# Create data frame for ggplot
df <- data.frame(fitted = log(step_model$fitted.values),
pearson_residual = pearson_residual)
# Pearson residuals plot
p1 <- ggplot(df, aes(x = fitted, y = pearson_residual)) +
geom_point(fill="#FF9999")+
labs(x = "Fitted values (log scale)", y = "Pearson residuals") +
theme_bw()
# QQ plot of Pearson residuals
p2 <- ggplot(df, aes(sample = pearson_residual)) +
geom_qq(fill="#FF9999") +
stat_qq_line(color="red") +
labs(x = "Theoretical quantiles", y = "Pearson residuals") +
theme_bw()
# Combine the plots
gridExtra::grid.arrange(p1, p2, ncol = 2)
#**** 6. Checking model assumptions ****
library(ggplot2)
# Create data frame for ggplot
df <- data.frame(fitted = log(step_model$fitted.values),
pearson_residual = pearson_residual)
# Pearson residuals plot
p1 <- ggplot(df, aes(x = fitted, y = pearson_residual)) +
geom_point(fill="#F8766D")+
labs(x = "Fitted values (log scale)", y = "Pearson residuals") +
theme_bw()
# QQ plot of Pearson residuals
p2 <- ggplot(df, aes(sample = pearson_residual)) +
geom_qq(fill="#F8766D") +
stat_qq_line(color="#F8766D") +
labs(x = "Theoretical quantiles", y = "Pearson residuals") +
theme_bw()
# Combine the plots
gridExtra::grid.arrange(p1, p2, ncol = 2)
#**** 6. Checking model assumptions ****
library(ggplot2)
# Create data frame for ggplot
df <- data.frame(fitted = log(step_model$fitted.values),
pearson_residual = pearson_residual)
# Pearson residuals plot
p1 <- ggplot(df, aes(x = fitted, y = pearson_residual)) +
geom_point(fill="#00BFC4")+
labs(x = "Fitted values (log scale)", y = "Pearson residuals") +
theme_bw()
# QQ plot of Pearson residuals
p2 <- ggplot(df, aes(sample = pearson_residual)) +
geom_qq(fill="#00BFC4") +
stat_qq_line(color="#F8766D") +
labs(x = "Theoretical quantiles", y = "Pearson residuals") +
theme_bw()
# Combine the plots
gridExtra::grid.arrange(p1, p2, ncol = 2)
#**** 6. Checking model assumptions ****
library(ggplot2)
# Create data frame for ggplot
df <- data.frame(fitted = log(step_model$fitted.values),
pearson_residual = pearson_residual)
# Pearson residuals plot
p1 <- ggplot(df, aes(x = fitted, y = pearson_residual)) +
geom_point(color="#00BFC4")+
labs(x = "Fitted values (log scale)", y = "Pearson residuals") +
theme_bw()
# QQ plot of Pearson residuals
p2 <- ggplot(df, aes(sample = pearson_residual)) +
geom_qq(fill="#00BFC4") +
stat_qq_line(color="#F8766D") +
labs(x = "Theoretical quantiles", y = "Pearson residuals") +
theme_bw()
# Combine the plots
gridExtra::grid.arrange(p1, p2, ncol = 2)
#**** 6. Checking model assumptions ****
library(ggplot2)
# Create data frame for ggplot
df <- data.frame(fitted = log(step_model$fitted.values),
pearson_residual = pearson_residual)
# Pearson residuals plot
p1 <- ggplot(df, aes(x = fitted, y = pearson_residual)) +
geom_point(color="steelblue")+
labs(x = "Fitted values (log scale)", y = "Pearson residuals") +
theme_bw()
# QQ plot of Pearson residuals
p2 <- ggplot(df, aes(sample = pearson_residual)) +
geom_qq(fill="steelblue") +
stat_qq_line(color="#F8766D") +
labs(x = "Theoretical quantiles", y = "Pearson residuals") +
theme_bw()
# Combine the plots
gridExtra::grid.arrange(p1, p2, ncol = 2)
#**** 6. Checking model assumptions ****
library(ggplot2)
# Create data frame for ggplot
df <- data.frame(fitted = log(step_model$fitted.values),
pearson_residual = pearson_residual)
# Pearson residuals plot
p1 <- ggplot(df, aes(x = fitted, y = pearson_residual)) +
geom_point(color="steelblue")+
labs(x = "Fitted values (log scale)", y = "Pearson residuals") +
theme_bw()
# QQ plot of Pearson residuals
p2 <- ggplot(df, aes(sample = pearson_residual)) +
geom_qq(color="steelblue") +
stat_qq_line(color="#F8766D") +
labs(x = "Theoretical quantiles", y = "Pearson residuals") +
theme_bw()
# Combine the plots
gridExtra::grid.arrange(p1, p2, ncol = 2)
#**** 6. Checking model assumptions ****
library(ggplot2)
# Create data frame for ggplot
df <- data.frame(fitted = log(step_model$fitted.values),
pearson_residual = pearson_residual)
# Pearson residuals plot
p1 <- ggplot(df, aes(x = fitted, y = pearson_residual)) +
geom_point(color="steelblue")+
geom_hline(aes(yintercept=0,color="#F8766D"))+
labs(x = "Fitted values (log scale)", y = "Pearson residuals") +
theme_bw()
# QQ plot of Pearson residuals
p2 <- ggplot(df, aes(sample = pearson_residual)) +
geom_qq(color="steelblue") +
stat_qq_line(color="#F8766D") +
labs(x = "Theoretical quantiles", y = "Pearson residuals") +
theme_bw()
# Combine the plots
gridExtra::grid.arrange(p1, p2, ncol = 2)
#**** 6. Checking model assumptions ****
library(ggplot2)
# Create data frame for ggplot
df <- data.frame(fitted = log(step_model$fitted.values),
pearson_residual = pearson_residual)
# Pearson residuals plot
p1 <- ggplot(df, aes(x = fitted, y = pearson_residual)) +
geom_point(color="steelblue")+
geom_hline(aes(yintercept=0))+
labs(x = "Fitted values (log scale)", y = "Pearson residuals") +
theme_bw()
# QQ plot of Pearson residuals
p2 <- ggplot(df, aes(sample = pearson_residual)) +
geom_qq(color="steelblue") +
stat_qq_line(color="#F8766D") +
labs(x = "Theoretical quantiles", y = "Pearson residuals") +
theme_bw()
# Combine the plots
gridExtra::grid.arrange(p1, p2, ncol = 2)
#**** 6. Checking model assumptions ****
library(ggplot2)
# Create data frame for ggplot
df <- data.frame(fitted = log(step_model$fitted.values),
pearson_residual = pearson_residual)
# Pearson residuals plot
p1 <- ggplot(df, aes(x = fitted, y = pearson_residual)) +
geom_point(color="steelblue")+
geom_hline(aes(yintercept=0),color="#F8766D")+
labs(x = "Fitted values (log scale)", y = "Pearson residuals") +
theme_bw()
# QQ plot of Pearson residuals
p2 <- ggplot(df, aes(sample = pearson_residual)) +
geom_qq(color="steelblue") +
stat_qq_line(color="#F8766D") +
labs(x = "Theoretical quantiles", y = "Pearson residuals") +
theme_bw()
# Combine the plots
gridExtra::grid.arrange(p1, p2, ncol = 2)
