' +- ',
exp(b0-1.96*b0_se))
suppressMessages[exp(confint(model , level = 0.95))]
#**** 2. Model with interaction terms: using all interaction terms *****
model <- glm(data_m~LA+NGO+PF+GO+(LA+NGO+PF+GO)^2, family=poisson(link="log"))
summary(model)
# Estimate of the total population size
exp(summary(model)$coefficients[1,1])+sum(data_m)
# Confidence interval for the population size:
b0<-summary(model)$coefficients[1,1]
b0_se<-summary(model)$coefficients[1,2]
# Confidence Interval for unobserved population
# Question: (1.96 right, not t distribution values right?)
cat('\nThe 95% confidence interval for the unobserved population is ',
exp(b0),
' +- ',
exp(b0-1.96*b0_se))
suppressMessages(exp(confint(model , level = 0.95)))
suppressMessages(exp(confint(model , level = 0.95))[1,1;2])
suppressMessages(exp(confint(model , level = 0.95))[1,1])
suppressMessages(exp(confint(model , level = 0.95))[1,c(1,2)])
suppressMessages(exp(confint(model , level = 0.95))[1,1])
# Estimate of the total population size
exp(summary(model)$coefficients[1,1])+sum(data_m)
#**** 2. Model with interaction terms: using all interaction terms *****
model <- glm(data_m~LA+NGO+PF+GO+(LA+NGO+PF+GO)^2, family=poisson(link="log"))
summary(model)
# Estimate of the total population size
exp(summary(model)$coefficients[1,1])+sum(data_m)
# Confidence Interval for unobserved population
# Explain:
cat('\nThe 95% confidence interval for the unobserved population is ',
suppressMessages(exp(confint(model , level = 0.95))[1,1]),
suppressMessages(exp(confint(model , level = 0.95))[1,2]))
#**** 2. Model with interaction terms: using all interaction terms *****
model <- glm(data_m~LA+NGO+PF+GO+(LA+NGO+PF+GO)^2, family=poisson(link="log"))
summary(model)
# Estimate of the total population size
exp(summary(model)$coefficients[1,1])+sum(data_m)
# Confidence Interval for unobserved population
# Explain:
cat('\nThe 95% confidence interval for the unobserved population is ',
'[',
suppressMessages(exp(confint(model , level = 0.95))[1,1]),
',',
suppressMessages(exp(confint(model , level = 0.95))[1,2]),
']')
#**** 2. Model with interaction terms: using all interaction terms *****
model <- glm(data_m~LA+NGO+PF+GO+(LA+NGO+PF+GO)^2, family=poisson(link="log"))
summary(model)
# Estimate of the total population size
exp(summary(model)$coefficients[1,1])+sum(data_m)
# Confidence Interval for unobserved population
# Explain:
cat('\nThe 95% confidence interval for the unobserved population is ',
'(',
suppressMessages(exp(confint(model , level = 0.95))[1,1]),
',',
suppressMessages(exp(confint(model , level = 0.95))[1,2]),
')')
#**** 2. Model with interaction terms: using all interaction terms *****
model <- glm(data_m~LA+NGO+PF+GO+(LA+NGO+PF+GO)^2, family=poisson(link="log"))
summary(model)
# Estimate of the total population size
exp(summary(model)$coefficients[1,1])+sum(data_m)
# Confidence Interval for unobserved population
# Explain: 'beta_0 + 1.96*std' is used to calculate a 95% confidence interval for a linear regression coefficient when the distribution of the errors is assumed to be normal. For a Poisson GLM model, the assumption of normality does not hold, the standard error of the estimated coefficients depends on the value of the response variable and is not constant. We use 'confint' function which takes into account the non-constant variance of the response variable. It performs better than 'beta_0 + 1.96*std'.
cat('\nThe 95% confidence interval for the unobserved population is ',
'(',
suppressMessages(exp(confint(model , level = 0.95))[1,1]),
',',
suppressMessages(exp(confint(model , level = 0.95))[1,2]),
')')
#**** 3. Model with interaction terms: Adding terms based on AIC ****
step_model<-step(model)
summary(step_model)
#**** 4. Correlations btwn variables as a criterion to choose interactions ****
# Looking at correlations between variables
#install.packages("psych")
library(psych)
one<-which(df$LA==0 & df$NGO==0)
two<-which(df$LA==1&df$NGO==0)
three<-which(df$LA==0&df$NGO==1)
four<-which(df$LA==1&df$NGO==1)
pair<-matrix(c(sum(df$data_m[one]), sum(df$data_m[two]),
sum(df$data_m[three]), sum(df$data_m[four])), nrow=2)
tetrachoric(pair)
#**** 2. Model with interaction terms: using all interaction terms *****
model <- glm(data_m~LA+NGO+PF+GO+(LA+NGO+PF+GO)^2, family=poisson(link="log"))
summary(model)
# Estimate of the total population size
exp(summary(model)$coefficients[1,1])+sum(data_m)
# Confidence Interval for unobserved population
# Explain: 'beta_0 + 1.96*std' is used to calculate a 95% confidence interval for a linear regression coefficient when the distribution of the errors is assumed to be normal. For a Poisson GLM model, the assumption of normality does not hold, the standard error of the estimated coefficients depends on the value of the response variable and is not constant. We use 'confint' function which takes into account the non-constant variance of the response variable. It performs better than 'beta_0 + 1.96*std'.
cat('\nThe 95% confidence interval for the unobserved population is ',
'(',
suppressMessages(exp(confint(model , level = 0.95))[1,1]),
',',
suppressMessages(exp(confint(model , level = 0.95))[1,2]),
')')
#**** 6. Checking model assumptions ****
# Residuals vs. fitted values plot
plot(step_model$fitted.values, residuals(step_model, type="pearson"),
ylab="Pearson residuals", xlab="Fitted values")
abline(h=0)
# Q-Q plot
qqnorm(step_model$residuals)
qqline(step_model$residuals)
# Scale-location plot
plot(step_model$fitted.values, sqrt(abs(step_model$residuals)),
ylab="sqrt(|Pearson residuals|)", xlab="Fitted values")
abline(h=c(1, -1)*qnorm(0.75))
# Residuals vs. leverage plot
plot(hatvalues(step_model), residuals(step_model, type="pearson"),
ylab="Pearson residuals", xlab="Leverage")
abline(h=0)
#**** 6. Checking model assumptions ****
library(ggplot2)
# Plot 1: Residuals vs Fitted Values
ggplot(data = step_model, aes(x = fitted(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Fitted Values", x = "Fitted Values", y = "Residuals")
# Plot 2: Normal Q-Q Plot
ggplot(data = step_model, aes(sample = residuals(step_model))) +
stat_qq() +
stat_qq_line() +
labs(title = "Normal Q-Q Plot")
# Plot 3: Scale-Location Plot
ggplot(data = step_model, aes(x = fitted(step_model), y = sqrt(abs(residuals(step_model))))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Scale-Location Plot", x = "Fitted Values", y = "Sqrt(|Residuals|)")
# Plot 4: Residuals vs Leverage
ggplot(data = step_model, aes(x = hatvalues(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Leverage", x = "Leverage", y = "Residuals")
#**** 6. Checking model assumptions ****
library(ggplot2)
library(gridExtra)
# Create the residuals vs fitted values plot
res_vs_fitted <- ggplot(step_model, aes(x = .fitted, y = .resid)) +
geom_point(alpha = 0.7) +
geom_smooth(se = FALSE) +
labs(x = "Fitted values", y = "Residuals", title = "Residuals vs Fitted Values Plot")
# Create the Q-Q plot
qq_plot <- ggplot(step_model, aes(sample = .stdresid)) +
geom_qq() +
geom_abline(slope = 1, intercept = 0) +
labs(title = "Normal Q-Q Plot")
# Arrange the two plots together
grid.arrange(res_vs_fitted, qq_plot, ncol = 2)
#**** 6. Checking model assumptions ****
library(ggplot2)
library(gridExtra)
# Plot 1: Residuals vs Fitted Values
res_fitted <- ggplot(data = step_model, aes(x = fitted(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Fitted Values", x = "Fitted Values", y = "Residuals")
# Plot 2: Normal Q-Q Plot
qq_plot <-ggplot(data = step_model, aes(sample = residuals(step_model))) +   stat_qq() +
stat_qq_line() +
labs(title = "Normal Q-Q Plot")
# Plot 3: Scale-Location Plot
sca_loca <- ggplot(data = step_model, aes(x = fitted(step_model), y = sqrt(abs(residuals(step_model))))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Scale-Location Plot", x = "Fitted Values", y = "Sqrt(|Residuals|)")
# Plot 4: Residuals vs Leverage
res_leve <- ggplot(data = step_model, aes(x = hatvalues(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Leverage", x = "Leverage", y = "Residuals")
#**** 6. Checking model assumptions ****
library(ggplot2)
library(gridExtra)
# Plot 1: Residuals vs Fitted Values
res_fitted <- ggplot(data = step_model, aes(x = fitted(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Fitted Values", x = "Fitted Values", y = "Residuals")
# Plot 2: Normal Q-Q Plot
qq_plot <-ggplot(data = step_model, aes(sample = residuals(step_model))) +   stat_qq() +
stat_qq_line() +
labs(title = "Normal Q-Q Plot")
# Plot 3: Scale-Location Plot
sca_loca <- ggplot(data = step_model, aes(x = fitted(step_model), y = sqrt(abs(residuals(step_model))))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Scale-Location Plot", x = "Fitted Values", y = "Sqrt(|Residuals|)")
# Plot 4: Residuals vs Leverage
res_leve <- ggplot(data = step_model, aes(x = hatvalues(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Leverage", x = "Leverage", y = "Residuals")
grid.arrange(res_fitted , qq_plot, sca_loca, res_leve,
ncol = 2,
nrow = 2)
#**** 6. Checking model assumptions ****
library(ggplot2)
library(gridExtra)
# Plot 1: Residuals vs Fitted Values
res_fitted <- ggplot(data = step_model, aes(x = fitted(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Fitted Values", x = "Fitted Values", y = "Residuals")
# Plot 2: Normal Q-Q Plot
qq_plot <-ggplot(data = step_model, aes(sample = residuals(step_model))) +   stat_qq() +
stat_qq_line() +
labs(title = "Normal Q-Q Plot")
# Plot 3: Scale-Location Plot
sca_loca <- ggplot(data = step_model, aes(x = fitted(step_model), y = sqrt(abs(residuals(step_model))))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Scale-Location Plot", x = "Fitted Values", y = "Sqrt(|Residuals|)")
# Plot 4: Residuals vs Leverage
res_leve <- ggplot(data = step_model, aes(x = hatvalues(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Leverage", x = "Leverage", y = "Residuals")
grid.arrange(res_fitted , qq_plot, sca_loca, res_leve,
ncol = 2,
nrow = 2)
#**** 6. Checking model assumptions ****
library(ggplot2)
library(gridExtra)
# Plot 1: Residuals vs Fitted Values
res_fitted <- ggplot(data = step_model, aes(x = fitted(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Fitted Values", x = "Fitted Values", y = "Residuals")
# Plot 2: Normal Q-Q Plot
qq_plot <-ggplot(data = step_model, aes(sample = residuals(step_model))) +   stat_qq() +
stat_qq_line() +
labs(title = "Normal Q-Q Plot")
# Plot 3: Scale-Location Plot
sca_loca <- ggplot(data = step_model, aes(x = fitted(step_model), y = sqrt(abs(residuals(step_model))))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Scale-Location Plot", x = "Fitted Values", y = "Sqrt(|Residuals|)")
# Plot 4: Residuals vs Leverage
res_leve <- ggplot(data = step_model, aes(x = hatvalues(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Leverage", x = "Leverage", y = "Residuals")
grid.arrange(res_fitted , qq_plot, sca_loca, res_leve,
ncol = 2,
nrow = 2)
#**** 6. Checking model assumptions ****
library(ggplot2)
library(gridExtra)
# Plot 1: Residuals vs Fitted Values
res_fitted <- ggplot(data = step_model, aes(x = fitted(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(se="FALSE") +
labs(title = "Residuals vs Fitted Values", x = "Fitted Values", y = "Residuals")
# Plot 2: Normal Q-Q Plot
qq_plot <-ggplot(data = step_model, aes(sample = residuals(step_model))) +   stat_qq() +
stat_qq_line() +
labs(title = "Normal Q-Q Plot")
# Plot 3: Scale-Location Plot
sca_loca <- ggplot(data = step_model, aes(x = fitted(step_model), y = sqrt(abs(residuals(step_model))))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Scale-Location Plot", x = "Fitted Values", y = "Sqrt(|Residuals|)")
# Plot 4: Residuals vs Leverage
res_leve <- ggplot(data = step_model, aes(x = hatvalues(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Leverage", x = "Leverage", y = "Residuals")
grid.arrange(res_fitted , qq_plot, sca_loca, res_leve,
ncol = 2,
nrow = 2)
#**** 6. Checking model assumptions ****
library(ggplot2)
library(gridExtra)
# Plot 1: Residuals vs Fitted Values
res_fitted <- ggplot(data = step_model, aes(x = fitted(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(se=FALSE) +
labs(title = "Residuals vs Fitted Values", x = "Fitted Values", y = "Residuals")
# Plot 2: Normal Q-Q Plot
qq_plot <-ggplot(data = step_model, aes(sample = residuals(step_model))) +   stat_qq() +
stat_qq_line() +
labs(title = "Normal Q-Q Plot")
# Plot 3: Scale-Location Plot
sca_loca <- ggplot(data = step_model, aes(x = fitted(step_model), y = sqrt(abs(residuals(step_model))))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Scale-Location Plot", x = "Fitted Values", y = "Sqrt(|Residuals|)")
# Plot 4: Residuals vs Leverage
res_leve <- ggplot(data = step_model, aes(x = hatvalues(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Leverage", x = "Leverage", y = "Residuals")
grid.arrange(res_fitted , qq_plot, sca_loca, res_leve,
ncol = 2,
nrow = 2)
#**** 6. Checking model assumptions ****
library(ggplot2)
library(gridExtra)
# Plot 1: Residuals vs Fitted Values
res_fitted <- ggplot(data = step_model, aes(x = fitted(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Fitted Values", x = "Fitted Values", y = "Residuals")
# Plot 2: Normal Q-Q Plot
qq_plot <-ggplot(data = step_model, aes(sample = residuals(step_model))) +   stat_qq() +
stat_qq_line() +
labs(title = "Normal Q-Q Plot")
# Plot 3: Scale-Location Plot
sca_loca <- ggplot(data = step_model, aes(x = fitted(step_model), y = sqrt(abs(residuals(step_model))))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Scale-Location Plot", x = "Fitted Values", y = "Sqrt(|Residuals|)")
# Plot 4: Residuals vs Leverage
res_leve <- ggplot(data = step_model, aes(x = hatvalues(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Leverage", x = "Leverage", y = "Residuals")
grid.arrange(res_fitted , qq_plot, sca_loca, res_leve,
ncol = 2,
nrow = 2)
#**** 6. Checking model assumptions ****
library(ggplot2)
library(gridExtra)
# Plot 1: Residuals vs Fitted Values
res_fitted <- ggplot(data = step_model, aes(x = fitted(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Fitted Values", x = "Fitted Values", y = "Residuals")
# Plot 2: Normal Q-Q Plot
qq_plot <- ggplot(step_model, aes(sample = .stdresid)) +
geom_qq() +
geom_abline(slope = 1, intercept = 0) +
labs(title = "Normal Q-Q Plot", x = "Theoretical Quantiles", y = "Sample Quantiles")
# Plot 3: Scale-Location Plot
sca_loca <- ggplot(data = step_model, aes(x = fitted(step_model), y = sqrt(abs(residuals(step_model))))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Scale-Location Plot", x = "Fitted Values", y = "Sqrt(|Residuals|)")
# Plot 4: Residuals vs Leverage
res_leve <- ggplot(data = step_model, aes(x = hatvalues(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Leverage", x = "Leverage", y = "Residuals")
grid.arrange(res_fitted , qq_plot, sca_loca, res_leve,
ncol = 2,
nrow = 2)
#**** 6. Checking model assumptions ****
library(ggplot2)
library(gridExtra)
# Plot 1: Residuals vs Fitted Values
res_fitted <- ggplot(data = step_model, aes(x = fitted(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Fitted Values", x = "Fitted Values", y = "Residuals")
# Plot 2: Normal Q-Q Plot
qq_plot <-ggplot(data = step_model, aes(sample = residuals(step_model))) +   stat_qq() +
stat_qq_line() +
labs(title = "Normal Q-Q Plot")
# Plot 3: Scale-Location Plot
sca_loca <- ggplot(data = step_model, aes(x = fitted(step_model), y = sqrt(abs(residuals(step_model))))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Scale-Location Plot", x = "Fitted Values", y = "Sqrt(|Residuals|)")
# Plot 4: Residuals vs Leverage
res_leve <- ggplot(data = step_model, aes(x = hatvalues(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Leverage", x = "Leverage", y = "Residuals")
grid.arrange(res_fitted , qq_plot, sca_loca, res_leve,
ncol = 2,
nrow = 2)
#**** 6. Checking model assumptions ****
library(ggplot2)
library(gridExtra)
# Plot 1: Residuals vs Fitted Values
res_fitted <- ggplot(data = step_model, aes(x = fitted(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Fitted Values", x = "Fitted Values", y = "Residuals")
# Plot 2: Normal Q-Q Plot
qq_plot <-ggplot(data = step_model, aes(sample = residuals(step_model))) +   geom_qq() +
stat_qq_line() +
labs(title = "Normal Q-Q Plot")
# Plot 3: Scale-Location Plot
sca_loca <- ggplot(data = step_model, aes(x = fitted(step_model), y = sqrt(abs(residuals(step_model))))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Scale-Location Plot", x = "Fitted Values", y = "Sqrt(|Residuals|)")
# Plot 4: Residuals vs Leverage
res_leve <- ggplot(data = step_model, aes(x = hatvalues(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Leverage", x = "Leverage", y = "Residuals")
grid.arrange(res_fitted , qq_plot, sca_loca, res_leve,
ncol = 2,
nrow = 2)
#**** 6. Checking model assumptions ****
library(ggplot2)
library(gridExtra)
# Plot 1: Residuals vs Fitted Values
res_fitted <- ggplot(data = step_model, aes(x = fitted(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Fitted Values", x = "Fitted Values", y = "Residuals")
# Plot 2: Normal Q-Q Plot
qq_plot <-ggplot(data = step_model, aes(sample = residuals(step_model))) +   geom_qq() +
geom_abline() +
labs(title = "Normal Q-Q Plot")
# Plot 3: Scale-Location Plot
sca_loca <- ggplot(data = step_model, aes(x = fitted(step_model), y = sqrt(abs(residuals(step_model))))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Scale-Location Plot", x = "Fitted Values", y = "Sqrt(|Residuals|)")
# Plot 4: Residuals vs Leverage
res_leve <- ggplot(data = step_model, aes(x = hatvalues(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Leverage", x = "Leverage", y = "Residuals")
grid.arrange(res_fitted , qq_plot, sca_loca, res_leve,
ncol = 2,
nrow = 2)
#**** 6. Checking model assumptions ****
library(ggplot2)
library(gridExtra)
# Plot 1: Residuals vs Fitted Values
res_fitted <- ggplot(data = step_model, aes(x = fitted(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Fitted Values", x = "Fitted Values", y = "Residuals")
# Plot 2: Normal Q-Q Plot
qq_plot <-ggplot(data = step_model, aes(sample = residuals(step_model))) +   geom_qq() +
geom_abline(slope = 1, intercept = 0) +
labs(title = "Normal Q-Q Plot")
# Plot 3: Scale-Location Plot
sca_loca <- ggplot(data = step_model, aes(x = fitted(step_model), y = sqrt(abs(residuals(step_model))))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Scale-Location Plot", x = "Fitted Values", y = "Sqrt(|Residuals|)")
# Plot 4: Residuals vs Leverage
res_leve <- ggplot(data = step_model, aes(x = hatvalues(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Leverage", x = "Leverage", y = "Residuals")
grid.arrange(res_fitted , qq_plot, sca_loca, res_leve,
ncol = 2,
nrow = 2)
residuals(step_model)
#**** 6. Checking model assumptions ****
library(ggplot2)
library(gridExtra)
# Plot 1: Residuals vs Fitted Values
res_fitted <- ggplot(data = step_model, aes(x = fitted(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Fitted Values", x = "Fitted Values", y = "Residuals")
# Plot 2: Normal Q-Q Plot
qq_plot <-ggplot(data = step_model, aes(sample = .stdresid))) +   geom_qq() +
#**** 6. Checking model assumptions ****
library(ggplot2)
library(gridExtra)
# Plot 1: Residuals vs Fitted Values
res_fitted <- ggplot(data = step_model, aes(x = fitted(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Fitted Values", x = "Fitted Values", y = "Residuals")
# Plot 2: Normal Q-Q Plot
qq_plot <-ggplot(data = step_model, aes(sample = .stdresid)) +   geom_qq() +
geom_abline(slope = 1, intercept = 0) +
labs(title = "Normal Q-Q Plot")
# Plot 3: Scale-Location Plot
sca_loca <- ggplot(data = step_model, aes(x = fitted(step_model), y = sqrt(abs(residuals(step_model))))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Scale-Location Plot", x = "Fitted Values", y = "Sqrt(|Residuals|)")
# Plot 4: Residuals vs Leverage
res_leve <- ggplot(data = step_model, aes(x = hatvalues(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Leverage", x = "Leverage", y = "Residuals")
grid.arrange(res_fitted , qq_plot, sca_loca, res_leve,
ncol = 2,
nrow = 2)
#**** 6. Checking model assumptions ****
library(ggplot2)
library(gridExtra)
# Plot 1: Residuals vs Fitted Values
res_fitted <- ggplot(data = step_model, aes(x = fitted(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Fitted Values", x = "Fitted Values", y = "Residuals")
# Plot 2: Normal Q-Q Plot
qq_plot <-ggplot(data = step_model, aes(sample = residuals(step_model))) +   geom_qq() +
geom_abline(slope = 1, intercept = 0) +
labs(title = "Normal Q-Q Plot")
# Plot 3: Scale-Location Plot
sca_loca <- ggplot(data = step_model, aes(x = fitted(step_model), y = sqrt(abs(residuals(step_model))))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Scale-Location Plot", x = "Fitted Values", y = "Sqrt(|Residuals|)")
# Plot 4: Residuals vs Leverage
res_leve <- ggplot(data = step_model, aes(x = hatvalues(step_model), y = residuals(step_model))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Residuals vs Leverage", x = "Leverage", y = "Residuals")
grid.arrange(res_fitted , qq_plot, sca_loca, res_leve,
ncol = 2,
nrow = 2)
